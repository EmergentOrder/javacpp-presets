// Targeted by JavaCPP version 1.5.3-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.onnxruntime;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.onnxruntime.global.onnxruntime.*;


// This is used internally by the C++ API. This is the common base class used by the wrapper objects.
@Name("Ort::Base<OrtValue>") @NoOffset @Properties(inherit = org.bytedeco.onnxruntime.presets.onnxruntime.class)
public class BasedValue extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public BasedValue(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public BasedValue(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public BasedValue position(long position) {
        return (BasedValue)super.position(position);
    }

  public BasedValue() { super((Pointer)null); allocate(); }
  private native void allocate();
  public BasedValue(OrtValue p) { super((Pointer)null); allocate(p); }
  private native void allocate(OrtValue p);

  public native @Name("operator OrtValue*") OrtValue asOrtValue();

  public native OrtValue release();
}
